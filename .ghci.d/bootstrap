#!/bin/sh

# replace all newlines with escape code.
smush() {
  while read line; do printf "%s" "$line\\n"; done
}

# escape backslashes and double quotes.
escape() {
  sed 's@\("\|\\\)@\\\1@g'
}

if ghc-pkg describe pretty-show >/dev/null 2>&1; then
  havePrettyShow=1
fi

if ghc-pkg describe hscolour >/dev/null 2>&1; then
  haveHsColour=1
fi

# TODO: I forget if I need these...
# :set -package pretty-show
# :set -package hscolour

if [[ -n "$havePrettyShow" ]]; then
  cat <<"EOF"
import qualified Text.Show.Pretty
:def ppr \x -> return $ "putStrLn $ Text.Show.Pretty.ppShow $ " ++ x
let interactivePrint = putStrLn . Text.Show.Pretty.ppShow
:set -interactive-print=interactivePrint
EOF
fi

if [[ -n "$haveHsColour" ]]; then
  cat <<"EOF"
import Language.Haskell.HsColour
import Language.Haskell.HsColour.Colourise
import Language.Haskell.HsColour.Output

:{
let colourPrefs = defaultColourPrefs
      { keyglyph = [Foreground Blue, Bold] -- e.g. [ ], =
      , layout   = [Foreground Cyan, Bold] -- e.g. { }
      , conid    = [Foreground Yellow, Bold]
      , conop    = [Foreground Yellow, Bold]
      , string   = [Foreground Green, Bold]
      , char     = [Foreground Magenta, Bold]
      , number   = [Foreground Red, Bold]
      }
:}

:m - Language.Haskell.HsColour
:m - Language.Haskell.HsColour.Colourise
:m - Language.Haskell.HsColour.Output

import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour

EOF
fi

if [[ -n "$haveHsColour" ]] && [[ -n "$havePrettyShow" ]]; then
  cat <<"EOF"
let interactivePrintColor = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) colourPrefs False False "" False . Text.Show.Pretty.ppShow
let interactivePrint = interactivePrintColor
:def pprc \x -> return $ "interactivePrintColor $ " ++ x
EOF
fi
