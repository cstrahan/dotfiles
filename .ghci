--------------------------------------------------------------------------------
-- Hoogle

let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:def! h return . (":! hoogle --color --count=20 " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info " ++) . ghciEscapeShellArg


--------------------------------------------------------------------------------
-- Bootstrap

-- This allows us to use a script to e.g. conditionally set up stuff.
import qualified System.Process
import qualified System.Environment
:def! bootstrap \x -> do { home <- System.Environment.lookupEnv "HOME"; case home of { Just home -> System.Process.readProcess (home ++ "/.ghci.d/bootstrap") [] ""; Nothing -> return "" } }
:bootstrap


--------------------------------------------------------------------------------
-- PROMPT

:set prompt  "\nλ> "
:set prompt2 "\n | "
-- :set prompt  "\n\ESC[34;1mλ> \ESC[m"
-- :set prompt2 "\n\ESC[34;1m | \ESC[m"

:set +m
