snippet mk "stdenv.mkDerivation { ... }" b
{ stdenv, lib, ${1:fetchFromGitHub}, pkgconfig }:

stdenv.mkDerivation rec {
	name = "${2:name}-${version}";
	version = "${3:1.0.0}";
	src = $1 {
		owner = "${4:owner}";
		repo = "${5:repo}";
		rev = ${6:version};
		sha256 = "${0}0000000000000000000000000000000000000000000000000000";
	};
	nativeBuildInputs = [
	  pkgconfig
	];
	buildInputs = [

	];
	meta = with lib; {
		description = "${7:...}";
		homepage = "${8:...}";
		license = licenses.${9:mit};
		platforms = platforms.${10:linux};
		maintainers = with maintainers; [ cstrahan ];
	};
}
endsnippet

snippet srv "service definition" b
{ config, lib, pkgs, ... }:

with lib;

let
	cfg = config.services.${1:service-name};

in {

	options.services.$1 = {

		enable = mkOption {
			type = types.bool;
			default = false;
			description = "
				Whether to enable the ${2:$1}.
			'';
		};

	};

	config = mkIf cfg.enable {
		$0
	};

}
endsnippet

snippet shell "generates a basic shell.nix" b
with import <nixpkgs> { };

runCommand "dummy" {
	hardeningDisable = "all";
	buildInputs = [
		$0
	];
	shellHook = ''
	'';
} ""
endsnippet

snippet hask "generates a Haskelly shell.nix" b
let
	pkgs = import <nixpkgs> { };

	ghcPackages = pkgs.haskellPackages.ghcWithHoogle (p: with p; [
		ipprint
		ghc-mod
		hdevtools
		stylish-haskell
		cabal-install
		pretty-show
		cabal2nix

		hspec
	]);

in

with pkgs;

runCommand "dummy" {
	buildInputs = [
		ghcPackages
	];
	shellHook = ''
		export NIX_GHC="${ghcPackages}/bin/ghc"
		export NIX_GHCPKG="${ghcPackages}/bin/ghc-pkg"
		export NIX_GHC_DOCDIR="${ghcPackages}/share/doc/ghc/html"
		export NIX_GHC_LIBDIR=$( $NIX_GHC --print-libdir )
	'';
} ""
endsnippet
